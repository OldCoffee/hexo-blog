<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis+反射实现表缓存</title>
    <link href="/2022/09/23/Redis%E4%BD%9C%E4%B8%BA%E8%A1%A8%E7%BC%93%E5%AD%98/"/>
    <url>/2022/09/23/Redis%E4%BD%9C%E4%B8%BA%E8%A1%A8%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一、根据主键查询缓存"><a href="#一、根据主键查询缓存" class="headerlink" title="一、根据主键查询缓存"></a>一、根据主键查询缓存</h2><hr><h3 id="1-实现逻辑"><a href="#1-实现逻辑" class="headerlink" title="1. 实现逻辑"></a>1. 实现逻辑</h3><ol><li>根据传参DO 通过反射获取主键注解</li><li>根据主键Field 创建 QueryWrapper 语句，创建redis key 的StringBuilder</li><li>根据Redis 查询是否已存在缓存，若存在则返回缓存，否则查询数据库并缓存</li></ol><h3 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据枚举获取Field</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * @param obj</span><br><span class="hljs-comment">    * @param annotationClz</span><br><span class="hljs-comment">    * @return</span><br><span class="hljs-comment">    */</span><br>   public static List&lt;Field&gt; get<span class="hljs-constructor">FieldsByAnnotation(Object <span class="hljs-params">obj</span>, Class <span class="hljs-params">annotationClz</span>)</span> &#123;<br>       Class clz = obj.get<span class="hljs-constructor">Class()</span>;<br>       <span class="hljs-comment">//注解判断-key处理</span><br>       Field<span class="hljs-literal">[]</span> fields = clz.get<span class="hljs-constructor">DeclaredFields()</span>;<br>       List&lt;Field&gt; fieldList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>       <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>           <span class="hljs-keyword">if</span> (field.is<span class="hljs-constructor">AnnotationPresent(<span class="hljs-params">annotationClz</span>)</span>) &#123;<br>               fieldList.add(field);<br>           &#125;<br>       &#125;<br>       return fieldList;<br>   &#125;<br>   <br>       default QueryWrapper&lt;T&gt; get<span class="hljs-constructor">QueryWrapper(T <span class="hljs-params">t</span>, List&lt;Field&gt; <span class="hljs-params">fieldList</span>, StringBuilder <span class="hljs-params">stringBuilder</span>)</span> &#123;<br>       QueryWrapper&lt;T&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;T&gt;<span class="hljs-literal">()</span>;<br>       <span class="hljs-keyword">for</span> (Field field : fieldList) &#123;<br>           field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>           Object value = null;<br>           <span class="hljs-keyword">try</span> &#123;<br>               value = field.get(t);<br>           &#125; catch (IllegalAccessException e) &#123;<br>               throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-params">e</span>)</span>;<br>           &#125;<br>           queryWrapper.eq(field.get<span class="hljs-constructor">Name()</span>, value);<br>           <span class="hljs-keyword">if</span> (stringBuilder.length<span class="hljs-literal">()</span> &gt; <span class="hljs-number">0</span>) &#123;<br>               stringBuilder.append(<span class="hljs-string">&quot;,&quot;</span>);<br>           &#125;<br>           stringBuilder.append(value);<br>       &#125;<br>       return queryWrapper;<br>   &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据主键查询缓存</span><br><span class="hljs-comment">   */</span><br>   default T select<span class="hljs-constructor">CacheByPrimaryKey(T <span class="hljs-params">t</span>)</span> &#123;<br>       List&lt;Field&gt; fieldList = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClzUtils</span>.</span></span>get<span class="hljs-constructor">FieldsByAnnotation(<span class="hljs-params">t</span>, Key.<span class="hljs-params">class</span>)</span>;<br>       <span class="hljs-keyword">if</span> (fieldList.size<span class="hljs-literal">()</span><span class="hljs-operator"> == </span><span class="hljs-number">0</span>) &#123;<br>           throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ServerException(GlobalErrorCodeConstants.DB_KEY_IS_NOT_EXISTS)</span>;<br>       &#125;<br>       StringBuilder stringBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>       QueryWrapper&lt;T&gt; queryWrapper = get<span class="hljs-constructor">QueryWrapper(<span class="hljs-params">t</span>, <span class="hljs-params">fieldList</span>, <span class="hljs-params">stringBuilder</span>)</span>;<br>       Object redisObj = redisUtil.get(RedisConstant.DATA_CACHE_ENTITY, t.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">SimpleName()</span>, stringBuilder);<br>       <span class="hljs-keyword">if</span> (redisObj != null) &#123;<br>           return (T) redisObj;<br>       &#125;<br>       <span class="hljs-comment">//查询及缓存处理</span><br>       T result = select<span class="hljs-constructor">One(<span class="hljs-params">queryWrapper</span>)</span>;<br>       redisUtil.set(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>format(RedisConstant.DATA_CACHE_ENTITY, t.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">SimpleName()</span>, stringBuilder), result);<br>       return result;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="二、实现分组缓存"><a href="#二、实现分组缓存" class="headerlink" title="二、实现分组缓存"></a>二、实现分组缓存</h2><hr><h3 id="1-实现逻辑-1"><a href="#1-实现逻辑-1" class="headerlink" title="1. 实现逻辑"></a>1. 实现逻辑</h3><ol><li>根据传参DO 通过反射获取分组注解</li><li>根据分组Field 创建 QueryWrapper 语句，创建redis key 的Map&lt;String,StringBuilder&gt;</li><li>根据Redis 查询是否已存在缓存，若存在则根据缓存结果查询主键缓存，组装并返回数，否则查询数据库并通过循环查出主键缓存，讲主键缓存的Key存入</li></ol><h3 id="2-示例代码-1"><a href="#2-示例代码-1" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据枚举获取Field</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param obj</span><br><span class="hljs-comment">     * @param annotationClz</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public static List&lt;Field&gt; get<span class="hljs-constructor">FieldsByAnnotation(Object <span class="hljs-params">obj</span>, Class <span class="hljs-params">annotationClz</span>)</span> &#123;<br>        Class clz = obj.get<span class="hljs-constructor">Class()</span>;<br>        <span class="hljs-comment">//注解判断-key处理</span><br>        Field<span class="hljs-literal">[]</span> fields = clz.get<span class="hljs-constructor">DeclaredFields()</span>;<br>        List&lt;Field&gt; fieldList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            <span class="hljs-keyword">if</span> (field.is<span class="hljs-constructor">AnnotationPresent(<span class="hljs-params">annotationClz</span>)</span>) &#123;<br>                fieldList.add(field);<br>            &#125;<br>        &#125;<br>        return fieldList;<br>    &#125;<br><br>    @NotNull<br>    default QueryWrapper&lt;T&gt; get<span class="hljs-constructor">QueryWrapper(T <span class="hljs-params">t</span>, List&lt;Field&gt; <span class="hljs-params">fieldList</span>, Map&lt;String, StringBuilder&gt; <span class="hljs-params">groupNameMap</span>)</span> &#123;<br>        QueryWrapper&lt;T&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;T&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">for</span> (Field field : fieldList) &#123;<br>            field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>            Object value = null;<br>            <span class="hljs-keyword">try</span> &#123;<br>                value = field.get(t);<br>            &#125; catch (IllegalAccessException e) &#123;<br>                throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-params">e</span>)</span>;<br>            &#125;<br>            queryWrapper.eq(field.get<span class="hljs-constructor">Name()</span>, value);<br>            group<span class="hljs-constructor">Build(<span class="hljs-params">groupNameMap</span>, <span class="hljs-params">field</span>, <span class="hljs-params">value</span>)</span>;<br><br>        &#125;<br>        return queryWrapper;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建分组数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param groupNameMap</span><br><span class="hljs-comment">     * @param field</span><br><span class="hljs-comment">     * @param value</span><br><span class="hljs-comment">     */</span><br>    default void group<span class="hljs-constructor">Build(Map&lt;String, StringBuilder&gt; <span class="hljs-params">groupNameMap</span>, Field <span class="hljs-params">field</span>, Object <span class="hljs-params">value</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (field.is<span class="hljs-constructor">AnnotationPresent(Group.<span class="hljs-params">class</span>)</span>) &#123;<br>            Group annotation = field.get<span class="hljs-constructor">Annotation(Group.<span class="hljs-params">class</span>)</span>;<br>            String name = annotation.name<span class="hljs-literal">()</span>;<br>            StringBuilder builder = groupNameMap.get(name);<br>            <span class="hljs-keyword">if</span> (builder<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>builder.length<span class="hljs-literal">()</span><span class="hljs-operator"> == </span><span class="hljs-number">0</span>) &#123;<br>                builder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                builder.append(<span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>            builder.append(value);<br>            groupNameMap.put(name, builder);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分组获取</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param t</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    default List&lt;T&gt; select<span class="hljs-constructor">ListCacheByGroup(T <span class="hljs-params">t</span>)</span> &#123;<br><br>        Class annotationClz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Group</span>.</span></span><span class="hljs-keyword">class</span>;<br>        List&lt;Field&gt; fieldList = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClzUtils</span>.</span></span>get<span class="hljs-constructor">FieldsByAnnotation(<span class="hljs-params">t</span>, <span class="hljs-params">annotationClz</span>)</span>;<br>        <span class="hljs-keyword">if</span> (fieldList.size<span class="hljs-literal">()</span><span class="hljs-operator"> == </span><span class="hljs-number">0</span>) &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ServerException(GlobalErrorCodeConstants.DB_GROUP_IS_NOT_EXISTS)</span>;<br>        &#125;<br>        Map&lt;String, StringBuilder&gt; groupNameMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;<br>        QueryWrapper&lt;T&gt; queryWrapper = get<span class="hljs-constructor">QueryWrapper(<span class="hljs-params">t</span>, <span class="hljs-params">fieldList</span>, <span class="hljs-params">groupNameMap</span>)</span>;<br>        String group = null;<br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>        Set&lt;Map.Entry&lt;String, StringBuilder&gt;&gt; entrySet = groupNameMap.entry<span class="hljs-constructor">Set()</span>;<br>        <span class="hljs-keyword">if</span> (entrySet.size<span class="hljs-literal">()</span> &gt; <span class="hljs-number">1</span>) &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ServerException(GlobalErrorCodeConstants.DB_GROUP_NAME_DIFFERENT)</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, StringBuilder&gt; stringStringBuilderEntry : entrySet) &#123;<br>            stringBuilder = stringStringBuilderEntry.get<span class="hljs-constructor">Value()</span>;<br>            group = stringStringBuilderEntry.get<span class="hljs-constructor">Key()</span>;<br>            <span class="hljs-keyword">if</span> (stringBuilder<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>stringBuilder.length<span class="hljs-literal">()</span><span class="hljs-operator"> == </span><span class="hljs-number">0</span><span class="hljs-operator"> || </span>group<span class="hljs-operator"> == </span>null) &#123;<br>                throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ServerException(GlobalErrorCodeConstants.DB_GROUP_VALUE_IS_EMPTY)</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//若缓存中存在，则取出所有缓存值，并通过该值取出对应实体 并组装成List 返回</span><br>        String key = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>format(RedisConstant.DATA_CACHE_GROUP, t.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">SimpleName()</span>, stringBuilder, group);<br>        Set&lt;T&gt; redisSet = redisUtil.members(key);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtil</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">redisSet</span>)</span>) &#123;<br>            List&lt;T&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">for</span> (T objKey : redisSet) &#123;<br>                Object obj = redisUtil.get(objKey);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectUtil</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">obj</span>)</span>) &#123;<br>                    <span class="hljs-built_in">list</span>.add((T) obj);<br>                &#125;<br>            &#125;<br>            return <span class="hljs-built_in">list</span>;<br>        &#125;<br><br>        List&lt;T&gt; result = select<span class="hljs-constructor">List(<span class="hljs-params">queryWrapper</span>)</span>;<br>        <span class="hljs-comment">//保存分组缓存:分组中保存实体缓存键</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtil</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">result</span>)</span>) &#123;<br>            <span class="hljs-keyword">for</span> (T obj : result) &#123;<br>                Map&lt;String, StringBuilder&gt; map = get<span class="hljs-constructor">KeyMap(<span class="hljs-params">obj</span>,Key.<span class="hljs-params">class</span>)</span>;<br>                <span class="hljs-comment">//删除主键缓存</span><br>                StringBuilder keyValue = map.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisConstant</span>.</span><span class="hljs-module"><span class="hljs-identifier">RedisGroup</span>.</span><span class="hljs-module"><span class="hljs-identifier">KEY</span>.</span></span>get<span class="hljs-constructor">Value()</span>);<br>                String objKey = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>format(RedisConstant.DATA_CACHE_ENTITY, t.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">SimpleName()</span>, keyValue);<br>                Object redisObj = redisUtil.get(objKey);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectUtil</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">redisObj</span>)</span>)&#123;<br>                    redisUtil.set(objKey, obj);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!redisUtil.is<span class="hljs-constructor">Member(<span class="hljs-params">key</span>, <span class="hljs-params">objKey</span>)</span>) &#123;<br>                    redisUtil.add(key, objKey);<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        return result;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="三、删除与更新逻辑"><a href="#三、删除与更新逻辑" class="headerlink" title="三、删除与更新逻辑"></a>三、删除与更新逻辑</h2><hr><h3 id="1-实现逻辑-2"><a href="#1-实现逻辑-2" class="headerlink" title="1. 实现逻辑"></a>1. 实现逻辑</h3><ol><li>根据传参DO 通过反射获取主键注解</li><li>根据主键Field 创建 QueryWrapper 语句，创建redis key 的Map&lt;String,StringBuilder&gt;</li><li>根据Redis 查询是否已存在缓存，若存在则删除主键缓存，并删除相关分组缓存内主键缓存Key</li></ol><h3 id="2-示例代码-2"><a href="#2-示例代码-2" class="headerlink" title="2.示例代码"></a>2.示例代码</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取KeyMap</span><br><span class="hljs-comment">*/</span><br>    default Map&lt;String, StringBuilder&gt; get<span class="hljs-constructor">KeyMap(T <span class="hljs-params">obj</span>,Class <span class="hljs-params">keyClz</span> )</span>&#123;<br>        List&lt;Field&gt; keyFieldList = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClzUtils</span>.</span></span>get<span class="hljs-constructor">FieldsByAnnotation(<span class="hljs-params">obj</span>, <span class="hljs-params">keyClz</span>)</span>;<br>        <span class="hljs-keyword">if</span> (keyFieldList.size<span class="hljs-literal">()</span><span class="hljs-operator"> == </span><span class="hljs-number">0</span>) &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ServerException(GlobalErrorCodeConstants.DB_KEY_IS_NOT_EXISTS)</span>;<br>        &#125;<br>        Map&lt;String, StringBuilder&gt; map = get<span class="hljs-constructor">StringBuilderMap(<span class="hljs-params">obj</span>, <span class="hljs-params">keyFieldList</span>)</span>;<br>        return map;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除主键缓存及分组缓存内主键缓存Key</span><br><span class="hljs-comment">*/</span><br>    default void remove<span class="hljs-constructor">RedisKeyAndGroup(T <span class="hljs-params">t</span>)</span> &#123;<br>        Map&lt;String, StringBuilder&gt; map = get<span class="hljs-constructor">KeyMap(<span class="hljs-params">t</span>, Key.<span class="hljs-params">class</span>)</span>;<br>        <span class="hljs-comment">//删除主键缓存</span><br>        StringBuilder keyValue = map.get(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisConstant</span>.</span><span class="hljs-module"><span class="hljs-identifier">RedisGroup</span>.</span><span class="hljs-module"><span class="hljs-identifier">KEY</span>.</span></span>get<span class="hljs-constructor">Value()</span>);<br>        <span class="hljs-keyword">if</span> (keyValue != null<span class="hljs-operator"> &amp;&amp; </span>keyValue.length<span class="hljs-literal">()</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            String objKey = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>format(RedisConstant.DATA_CACHE_ENTITY, t.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">SimpleName()</span>, keyValue);<br>            Object obj = redisUtil.get(objKey);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectUtil</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">obj</span>)</span>) &#123;<br>                redisUtil.delete(RedisConstant.DATA_CACHE_ENTITY, t.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">SimpleName()</span>, keyValue);<br>                Map&lt;String, StringBuilder&gt; groupMap = get<span class="hljs-constructor">KeyMap((T)</span> obj, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Group</span>.</span></span><span class="hljs-keyword">class</span>);<br>                <span class="hljs-keyword">for</span> (Map.Entry&lt;String, StringBuilder&gt; stringStringBuilderEntry : groupMap.entry<span class="hljs-constructor">Set()</span>) &#123;<br>                    String key = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>format(RedisConstant.DATA_CACHE_GROUP, t.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">SimpleName()</span>, stringStringBuilderEntry.get<span class="hljs-constructor">Value()</span>, stringStringBuilderEntry.get<span class="hljs-constructor">Key()</span>);<br>                    <span class="hljs-keyword">if</span> (redisUtil.is<span class="hljs-constructor">Member(<span class="hljs-params">key</span>, <span class="hljs-params">objKey</span>)</span>) &#123;<br>                        redisUtil.remove(key, objKey);<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>            map.remove(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisConstant</span>.</span><span class="hljs-module"><span class="hljs-identifier">RedisGroup</span>.</span><span class="hljs-module"><span class="hljs-identifier">KEY</span>.</span></span>get<span class="hljs-constructor">Value()</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/08/hello-world/"/>
    <url>/2022/09/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
